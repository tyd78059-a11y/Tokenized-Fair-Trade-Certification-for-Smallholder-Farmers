(define-constant ERR-NOT-AUTHORIZED u100)
(define-constant ERR-INVALID-AMOUNT u101)
(define-constant ERR-INVALID-PREMIUM-RATE u102)
(define-constant ERR-INVALID-DISTRIBUTION-PERIOD u103)
(define-constant ERR-INSUFFICIENT-BALANCE u104)
(define-constant ERR-PREMIUM-ALREADY-CLAIMED u105)
(define-constant ERR-NO-ACTIVE-PREMIUM u106)
(define-constant ERR-INVALID-FARMER-ID u107)
(define-constant ERR-INVALID-BATCH-ID u108)
(define-constant ERR-INVALID-ORACLE-DATA u109)
(define-constant ERR-DISPUTE-IN-PROGRESS u110)
(define-constant ERR-INVALID-STATUS u111)
(define-constant ERR-POOL-NOT-ACTIVE u112)
(define-constant ERR-INVALID-RECIPIENT u113)
(define-constant ERR-TRANSFER-FAILED u114)
(define-constant ERR-INVALID-PENALTY-RATE u115)
(define-constant ERR-INVALID-THRESHOLD u116)
(define-constant ERR-MAX-DEPOSITS-EXCEEDED u117)
(define-constant ERR-INVALID-CURRENCY u118)
(define-constant ERR-AUTHORITY-NOT-SET u119)
(define-constant ERR-INVALID-TIMESTAMP u120)

(define-data-var pool-active bool true)
(define-data-var total-deposited uint u0)
(define-data-var total-distributed uint u0)
(define-data-var premium-rate uint u10)
(define-data-var distribution-period uint u144)
(define-data-var penalty-rate uint u5)
(define-data-var claim-threshold uint u100)
(define-data-var max-deposits uint u1000000)
(define-data-var authority-principal principal tx-sender)
(define-data-var oracle-contract (optional principal) none)
(define-data-var certification-contract (optional principal) none)
(define-data-var tracker-contract (optional principal) none)
(define-data-var resolver-contract (optional principal) none)

(define-map deposits principal { amount: uint, timestamp: uint })
(define-map premiums uint { farmer: principal, amount: uint, claimed: bool, batch-id: uint })
(define-map farmer-balances principal uint)
(define-map disputes uint { initiator: principal, reason: (string-utf8 256), resolved: bool })
(define-map sales-verifications uint { batch-id: uint, verified: bool, price: uint })

(define-read-only (get-pool-stats)
  { active: (var-get pool-active), total-deposited: (var-get total-deposited), total-distributed: (var-get total-distributed) }
)

(define-read-only (get-deposit (depositor principal))
  (map-get? deposits depositor)
)

(define-read-only (get-premium (premium-id uint))
  (map-get? premiums premium-id)
)

(define-read-only (get-farmer-balance (farmer principal))
  (default-to u0 (map-get? farmer-balances farmer))
)

(define-read-only (get-dispute (dispute-id uint))
  (map-get? disputes dispute-id)
)

(define-read-only (get-sale-verification (sale-id uint))
  (map-get? sales-verifications sale-id)
)

(define-private (validate-amount (amount uint))
  (if (> amount u0)
      (ok true)
      (err ERR-INVALID-AMOUNT))
)

(define-private (validate-rate (rate uint))
  (if (and (> rate u0) (<= rate u100))
      (ok true)
      (err ERR-INVALID-PREMIUM-RATE))
)

(define-private (validate-period (period uint))
  (if (> period u0)
      (ok true)
      (err ERR-INVALID-DISTRIBUTION-PERIOD))
)

(define-private (validate-farmer (farmer principal))
  (if (not (is-eq farmer tx-sender))
      (ok true)
      (err ERR-NOT-AUTHORIZED))
)

(define-private (validate-batch (batch-id uint))
  (if (> batch-id u0)
      (ok true)
      (err ERR-INVALID-BATCH-ID))
)

(define-private (validate-oracle-data (data uint))
  (if (> data u0)
      (ok true)
      (err ERR-INVALID-ORACLE-DATA))
)

(define-private (validate-currency (currency (string-utf8 20)))
  (if (or (is-eq currency u"STX") (is-eq currency u"USD"))
      (ok true)
      (err ERR-INVALID-CURRENCY))
)

(define-private (validate-timestamp (ts uint))
  (if (>= ts block-height)
      (ok true)
      (err ERR-INVALID-TIMESTAMP))
)

(define-public (set-authority (new-authority principal))
  (begin
    (asserts! (is-eq tx-sender (var-get authority-principal)) (err ERR-NOT-AUTHORIZED))
    (var-set authority-principal new-authority)
    (ok true)
  )
)

(define-public (set-oracle-contract (contract principal))
  (begin
    (asserts! (is-eq tx-sender (var-get authority-principal)) (err ERR-NOT-AUTHORIZED))
    (var-set oracle-contract (some contract))
    (ok true)
  )
)

(define-public (set-certification-contract (contract principal))
  (begin
    (asserts! (is-eq tx-sender (var-get authority-principal)) (err ERR-NOT-AUTHORIZED))
    (var-set certification-contract (some contract))
    (ok true)
  )
)

(define-public (set-tracker-contract (contract principal))
  (begin
    (asserts! (is-eq tx-sender (var-get authority-principal)) (err ERR-NOT-AUTHORIZED))
    (var-set tracker-contract (some contract))
    (ok true)
  )
)

(define-public (set-resolver-contract (contract principal))
  (begin
    (asserts! (is-eq tx-sender (var-get authority-principal)) (err ERR-NOT-AUTHORIZED))
    (var-set resolver-contract (some contract))
    (ok true)
  )
)

(define-public (toggle-pool-active)
  (begin
    (asserts! (is-eq tx-sender (var-get authority-principal)) (err ERR-NOT-AUTHORIZED))
    (var-set pool-active (not (var-get pool-active)))
    (ok (var-get pool-active))
  )
)

(define-public (deposit-premium (amount uint))
  (let ((current-deposit (default-to { amount: u0, timestamp: u0 } (map-get? deposits tx-sender))))
    (try! (validate-amount amount))
    (asserts! (var-get pool-active) (err ERR-POOL-NOT-ACTIVE))
    (asserts! (<= (+ (get amount current-deposit) amount) (var-get max-deposits)) (err ERR-MAX-DEPOSITS-EXCEEDED))
    (try! (stx-transfer? amount tx-sender (as-contract tx-sender)))
    (map-set deposits tx-sender { amount: (+ (get amount current-deposit) amount), timestamp: block-height })
    (var-set total-deposited (+ (var-get total-deposited) amount))
    (print { event: "premium-deposited", depositor: tx-sender, amount: amount })
    (ok amount)
  )
)

(define-public (calculate-and-distribute (farmer principal) (batch-id uint) (sale-id uint))
  (let ((verification (unwrap! (map-get? sales-verifications sale-id) (err ERR-NO-ACTIVE-PREMIUM)))
        (price (get price verification))
        (premium-amount (/ (* price (var-get premium-rate)) u100))
        (premium-id (+ (var-get total-distributed) u1)))
    (try! (validate-farmer farmer))
    (try! (validate-batch batch-id))
    (try! (validate-oracle-data price))
    (asserts! (get verified verification) (err ERR-INVALID-STATUS))
    (asserts! (>= (var-get total-deposited) premium-amount) (err ERR-INSUFFICIENT-BALANCE))
    (map-set premiums premium-id { farmer: farmer, amount: premium-amount, claimed: false, batch-id: batch-id })
    (var-set farmer-balances farmer (+ (get-farmer-balance farmer) premium-amount))
    (var-set total-distributed (+ (var-get total-distributed) premium-amount))
    (var-set total-deposited (- (var-get total-deposited) premium-amount))
    (print { event: "premium-distributed", farmer: farmer, amount: premium-amount, premium-id: premium-id })
    (ok premium-amount)
  )
)

(define-public (claim-premium (premium-id uint))
  (let ((premium (unwrap! (map-get? premiums premium-id) (err ERR-NO-ACTIVE-PREMIUM)))
        (farmer (get farmer premium)))
    (asserts! (is-eq tx-sender farmer) (err ERR-NOT-AUTHORIZED))
    (asserts! (not (get claimed premium)) (err ERR-PREMIUM-ALREADY-CLAIMED))
    (asserts! (>= (get-farmer-balance farmer) (get amount premium)) (err ERR-INSUFFICIENT-BALANCE))
    (try! (as-contract (stx-transfer? (get amount premium) tx-sender farmer)))
    (map-set premiums premium-id (merge premium { claimed: true }))
    (var-set farmer-balances farmer (- (get-farmer-balance farmer) (get amount premium)))
    (print { event: "premium-claimed", farmer: farmer, amount: (get amount premium), premium-id: premium-id })
    (ok (get amount premium))
  )
)

(define-public (initiate-dispute (premium-id uint) (reason (string-utf8 256)))
  (let ((premium (unwrap! (map-get? premiums premium-id) (err ERR-NO-ACTIVE-PREMIUM)))
        (dispute-id (+ (len disputes) u1)))
    (asserts! (is-eq tx-sender (get farmer premium)) (err ERR-NOT-AUTHORIZED))
    (asserts! (not (get claimed premium)) (err ERR-PREMIUM-ALREADY-CLAIMED))
    (map-set disputes dispute-id { initiator: tx-sender, reason: reason, resolved: false })
    (print { event: "dispute-initiated", premium-id: premium-id, dispute-id: dispute-id })
    (ok dispute-id)
  )
)

(define-public (resolve-dispute (dispute-id uint) (resolve-in-favor bool))
  (let ((dispute (unwrap! (map-get? disputes dispute-id) (err ERR-NO-ACTIVE-PREMIUM))))
    (asserts! (is-eq tx-sender (var-get authority-principal)) (err ERR-NOT-AUTHORIZED))
    (asserts! (not (get resolved dispute)) (err ERR-INVALID-STATUS))
    (map-set disputes dispute-id (merge dispute { resolved: true }))
    (print { event: "dispute-resolved", dispute-id: dispute-id, in-favor: resolve-in-favor })
    (ok true)
  )
)

(define-public (verify-sale (sale-id uint) (batch-id uint) (price uint))
  (begin
    (asserts! (is-eq tx-sender (unwrap! (var-get oracle-contract) (err ERR-AUTHORITY-NOT-SET))) (err ERR-NOT-AUTHORIZED))
    (try! (validate-batch batch-id))
    (try! (validate-oracle-data price))
    (map-set sales-verifications sale-id { batch-id: batch-id, verified: true, price: price })
    (print { event: "sale-verified", sale-id: sale-id, batch-id: batch-id })
    (ok true)
  )
)